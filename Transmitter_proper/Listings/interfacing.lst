C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE INTERFACING
OBJECT MODULE PLACED IN .\Objects\interfacing.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE interfacing.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\interfacing.lst) T
                    -ABS(2) OBJECT(.\Objects\interfacing.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          
   4          #define LCD_data  P2                // LCD Data port
   5          
   6          
   7          void SPI_Init();
   8          void LCD_Init();
   9          void Timer_Init(int b);
  10          void LCD_DataWrite(char dat);
  11          void LCD_CmdWrite(char cmd);
  12          void LCD_StringWrite(char * str, unsigned char len);
  13          void LCD_Ready();
  14          void check_column();
  15          void check_row();
  16          void sdelay(int delay);
  17          void keys_init();
  18          void send_char(char a);
  19          void send_bit(int b);
  20          
  21          int column = 0;
  22          int row = 0;
  23          char msg[1];
  24          char count_str[4];
  25          char keys[4][4];
  26          
  27          int success;
  28          int prev_success;
  29          int s_count = 0;
  30          sbit Data_Out = P0^4;
  31          
  32          sbit LCD_rs = P0^0;                 // LCD Register Select
  33          sbit LCD_rw = P0^1;                 // LCD Read/Write
  34          sbit LCD_en = P0^2;                 // LCD Enable
  35          sbit LCD_busy = P2^7;               // LCD Busy Flag
  36          
  37          void main(void)
  38          {
  39   1        Data_Out = 0;
  40   1        LCD_Init();
  41   1        keys_init();
  42   1        while (1)
  43   1          {
  44   2            LCD_CmdWrite(0x80);     // Cursor to First line First Position
  45   2            check_row();
  46   2          }
  47   1      }
  48           // FUNCTION_PURPOSE:LCD Initialization
  49           // FUNCTION_INPUTS: void
  50           // FUNCTION_OUTPUTS: none
  51           
  52          void LCD_Init()
  53          {
  54   1        sdelay(100);
C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 2   

  55   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
  56   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
  57   1        LCD_CmdWrite(0x01);     // Clear the LCD
  58   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
  59   1      }
  60          
  61          
  62          /**
  63           * FUNCTION_PURPOSE: Write Command to LCD
  64           * FUNCTION_INPUTS: cmd- command to be written
  65           * FUNCTION_OUTPUTS: none
  66           */
  67          void LCD_CmdWrite(char cmd)
  68          {
  69   1        LCD_Ready();
  70   1        LCD_data=cmd;           // Send the command to LCD
  71   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
  72   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
  73   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
  74   1        sdelay(5);
  75   1        LCD_en=0;
  76   1        sdelay(5);
  77   1      }
  78          
  79          /**
  80           * FUNCTION_PURPOSE: Write Command to LCD
  81           * FUNCTION_INPUTS: dat- data to be written
  82           * FUNCTION_OUTPUTS: none
  83           */
  84          void LCD_DataWrite( char dat)
  85          {
  86   1        LCD_Ready();
  87   1        LCD_data=dat;           // Send the data to LCD
  88   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
  89   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
  90   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
  91   1        sdelay(5);
  92   1        LCD_en=0;
  93   1        sdelay(5);
  94   1      }
  95          /**
  96           * FUNCTION_PURPOSE: Write a string on the LCD Screen
  97           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
  98                              2. length - length of the array
  99           * FUNCTION_OUTPUTS: none
 100           */
 101          void LCD_StringWrite( char * str, unsigned char length)
 102          {
 103   1          while(length>0)
 104   1          {
 105   2              LCD_DataWrite(*str);
 106   2              str++;
 107   2              length--;
 108   2          }
 109   1      }
 110          
 111          /**
 112           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 113           * FUNCTION_INPUTS: void
 114           * FUNCTION_OUTPUTS: none
 115           */
 116          void LCD_Ready()
C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 3   

 117          {
 118   1        LCD_data = 0xFF;
 119   1        LCD_rs = 0;
 120   1        LCD_rw = 1;
 121   1        LCD_en = 0;
 122   1        sdelay(5);
 123   1        LCD_en = 1;
 124   1        while(LCD_busy == 1)
 125   1        {
 126   2          LCD_en = 0;
 127   2          LCD_en = 1;
 128   2        }
 129   1        LCD_en = 0;
 130   1      }
 131          
 132          /**
 133           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 134           * FUNCTION_INPUTS: void
 135           * FUNCTION_OUTPUTS: none
 136           */
 137          void sdelay(int delay)
 138          {
 139   1        char d=0;
 140   1        while(delay>0)
 141   1        {
 142   2          for(d=0;d<5;d++);
 143   2          delay--;
 144   2        }
 145   1      }
 146          
 147          void check_row()
 148          {
 149   1          //row = 0;
 150   1          success = 1;
 151   1          P3 = 0x7F;
 152   1          if(P3 != 0x7F)
 153   1          {
 154   2            row = 1;
 155   2            check_column();
 156   2          }
 157   1          else
 158   1          {
 159   2            P3 = 0xBF;
 160   2            if(P3 != 0xBF)
 161   2            {
 162   3              row = 2;
 163   3              check_column();
 164   3            }
 165   2            else
 166   2            {
 167   3              P3 = 0xDF;
 168   3              if(P3 != 0xDF)
 169   3              {
 170   4                row = 3;
 171   4                check_column();
 172   4              }
 173   3              else
 174   3              {
 175   4                P3 = 0xEF;
 176   4                if(P3 != 0xEF)
 177   4                {
 178   5                  row = 4;
C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 4   

 179   5                  check_column();
 180   5                }
 181   4                else
 182   4                {
 183   5                  success = 0;
 184   5                }
 185   4              }
 186   3            }
 187   2          }
 188   1        if(success == 1 && prev_success == 0)
 189   1        {
 190   2          s_count++;
 191   2          
 192   2          msg[0] = keys[row-1][column-1]; 
 193   2          send_char(msg[0]); 
 194   2          count_str[3] = (char) ((s_count)%10 + 48);
 195   2          count_str[2] = (char) ((s_count/10)%10 + 48);
 196   2          count_str[1] = (char) ((s_count/100)%10 + 48);
 197   2          count_str[0] = '_'; 
 198   2          LCD_StringWrite(msg,1);
 199   2          LCD_StringWrite(count_str,4); 
 200   2        }
 201   1      //  rc[1] = (char) (column + 48);
 202   1      //  rc[0] = (char) (row + 48);  
 203   1        
 204   1        
 205   1        prev_success = success;
 206   1      } 
 207          
 208          void check_column()
 209          {
 210   1          //column = 0;
 211   1          P3 = 0xF7;
 212   1          if(P3 != 0xF7)
 213   1          {
 214   2            column = 1;
 215   2          }
 216   1          else
 217   1          {
 218   2            P3 = 0xFB;
 219   2            if(P3 != 0xFB)
 220   2            {
 221   3              column = 2;
 222   3            }
 223   2            else
 224   2            {
 225   3              P3 = 0xFD;
 226   3              if(P3 != 0xFD)
 227   3              {
 228   4                column = 3;
 229   4              }
 230   3              else
 231   3              {
 232   4                P3 = 0xFE;
 233   4                if(P3 != 0xFE)
 234   4                {
 235   5                  column = 4;
 236   5                }
 237   4              }
 238   3            }
 239   2          }
 240   1        }
C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 5   

 241          
 242            void keys_init(void)
 243            {
 244   1          keys[0][0] = '1';
 245   1          keys[0][1] = '2';
 246   1          keys[0][2] = '3';
 247   1          keys[0][3] = 'A';
 248   1          
 249   1          keys[1][0] = '4';
 250   1          keys[1][1] = '5';
 251   1          keys[1][2] = '6';
 252   1          keys[1][3] = 'B';
 253   1          
 254   1          keys[2][0] = '7';
 255   1          keys[2][1] = '8';
 256   1          keys[2][2] = '9';
 257   1          keys[2][3] = 'C';
 258   1          
 259   1          keys[3][0] = '*';
 260   1          keys[3][1] = '0';
 261   1          keys[3][2] = '#';
 262   1          keys[3][3] = 'D';
 263   1        }
 264            
 265            void send_char( char a )
 266            {
 267   1          int a_int = (int) a;
 268   1          int i;
 269   1          int a_bits[9];
 270   1          for(i=0;i<8;i++)
 271   1          {
 272   2            a_bits[i] = a_int%2;
 273   2            a_int = a_int/2;
 274   2          }
 275   1          a_bits[8] = 1;
 276   1          for(i=0;i<8;i++)
 277   1          {
 278   2            send_bit(a_bits[i]);
 279   2          }
 280   1        }
 281            void Timer_Init(int b)
 282            {
 283   1          TMOD = 0x10;
 284   1          if(b)
 285   1          {
 286   2            TH0 = 0xFE;
 287   2            TL0 = 0x0C;
 288   2          }
 289   1          else
 290   1          {
 291   2            TH0 = 0xFC;
 292   2            TL0 = 0x18;
 293   2          }
 294   1          TR0 = 1;
 295   1        }
 296            void send_bit( int b )
 297            {
 298   1          Timer_Init(b);
 299   1          while(TF0 == 0);
 300   1          TF0 = 0;
 301   1          //invert here;
 302   1          Data_Out = 1;
C51 COMPILER V9.50a   INTERFACING                                                          03/01/2017 21:05:22 PAGE 6   

 303   1          Timer_Init(b);
 304   1          while(TF0 == 0);
 305   1          TF0 = 0;
 306   1          //invert again
 307   1          Data_Out = 0;
 308   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    684    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
