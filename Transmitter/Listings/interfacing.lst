C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE INTERFACING
OBJECT MODULE PLACED IN .\Objects\interfacing.obj
COMPILER INVOKED BY: Z:\home\achyuth_koneti\C51\BIN\C51.exe interfacing.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\interfacing.lst) TABS(2) OBJECT(.\Objects\interfacing.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          
   4          #define LCD_data  P2                // LCD Data port
   5          
   6          
   7          void SPI_Init();
   8          void LCD_Init();
   9          void Timer_Init(int b);
  10          void LCD_DataWrite(char dat);
  11          void LCD_CmdWrite(char cmd);
  12          void LCD_StringWrite(char * str, unsigned char len);
  13          void LCD_Ready();
  14          void check_column();
  15          void check_row();
  16          void sdelay(int delay);
  17          void keys_init();
  18          void send_char(char a);
  19          void send_bit(int b);
  20          void send_start_bit(void);
  21          
  22          int column = 0;
  23          int row = 0;
  24          char msg[1];
  25          char count_str[4];
  26          char keys[4][4];
  27          char data_char = 'A';
  28          int a_bits[10] = {2,0,0,0,0,0,0,0,0,1};
  29          int success;
  30          int prev_success;
  31          int s_count = 0;
  32          sbit Data_Out = P0^4;
  33          
  34          sbit LCD_rs = P0^0;                 // LCD Register Select
  35          sbit LCD_rw = P0^1;                 // LCD Read/Write
  36          sbit LCD_en = P0^2;                 // LCD Enable
  37          sbit LCD_busy = P2^7;               // LCD Busy Flag
  38          
  39          void main(void)
  40          {
  41   1        Data_Out = 1;
  42   1        LCD_Init();
  43   1        keys_init();
  44   1        while (1)
  45   1          {
  46   2            check_row();
  47   2          }
  48   1      }
  49           // FUNCTION_PURPOSE:LCD Initialization
  50           // FUNCTION_INPUTS: void
  51           // FUNCTION_OUTPUTS: none
  52           
  53          void LCD_Init()
  54          {
C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 2   

  55   1        sdelay(100);
  56   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
  57   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
  58   1        LCD_CmdWrite(0x01);     // Clear the LCD
  59   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
  60   1      }
  61          
  62          
  63          /**
  64           * FUNCTION_PURPOSE: Write Command to LCD
  65           * FUNCTION_INPUTS: cmd- command to be written
  66           * FUNCTION_OUTPUTS: none
  67           */
  68          void LCD_CmdWrite(char cmd)
  69          {
  70   1        LCD_Ready();
  71   1        LCD_data=cmd;           // Send the command to LCD
  72   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
  73   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
  74   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
  75   1        sdelay(5);
  76   1        LCD_en=0;
  77   1        sdelay(5);
  78   1      }
  79          
  80          /**
  81           * FUNCTION_PURPOSE: Write Command to LCD
  82           * FUNCTION_INPUTS: dat- data to be written
  83           * FUNCTION_OUTPUTS: none
  84           */
  85          void LCD_DataWrite( char dat)
  86          {
  87   1        LCD_Ready();
  88   1        LCD_data=dat;           // Send the data to LCD
  89   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
  90   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
  91   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
  92   1        sdelay(5);
  93   1        LCD_en=0;
  94   1        sdelay(5);
  95   1      }
  96          /**
  97           * FUNCTION_PURPOSE: Write a string on the LCD Screen
  98           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
  99                              2. length - length of the array
 100           * FUNCTION_OUTPUTS: none
 101           */
 102          void LCD_StringWrite( char * str, unsigned char length)
 103          {
 104   1          while(length>0)
 105   1          {
 106   2              LCD_DataWrite(*str);
 107   2              str++;
 108   2              length--;
 109   2          }
 110   1      }
 111          
 112          /**
 113           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 114           * FUNCTION_INPUTS: void
 115           * FUNCTION_OUTPUTS: none
 116           */
C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 3   

 117          void LCD_Ready()
 118          {
 119   1        LCD_data = 0xFF;
 120   1        LCD_rs = 0;
 121   1        LCD_rw = 1;
 122   1        LCD_en = 0;
 123   1        sdelay(5);
 124   1        LCD_en = 1;
 125   1        while(LCD_busy == 1)
 126   1        {
 127   2          LCD_en = 0;
 128   2          LCD_en = 1;
 129   2        }
 130   1        LCD_en = 0;
 131   1      }
 132          
 133          /**
 134           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 135           * FUNCTION_INPUTS: void
 136           * FUNCTION_OUTPUTS: none
 137           */
 138          void sdelay(int delay)
 139          {
 140   1        char d=0;
 141   1        while(delay>0)
 142   1        {
 143   2          for(d=0;d<5;d++);
 144   2          delay--;
 145   2        }
 146   1      }
 147          
 148          void check_row()
 149          {
 150   1          //row = 0;
 151   1          success = 1;
 152   1          P3 = 0x7F;
 153   1          if(P3 != 0x7F)
 154   1          {
 155   2            row = 1;
 156   2            check_column();
 157   2          }
 158   1          else
 159   1          {
 160   2            P3 = 0xBF;
 161   2            if(P3 != 0xBF)
 162   2            {
 163   3              row = 2;
 164   3              check_column();
 165   3            }
 166   2            else
 167   2            {
 168   3              P3 = 0xDF;
 169   3              if(P3 != 0xDF)
 170   3              {
 171   4                row = 3;
 172   4                check_column();
 173   4              }
 174   3              else
 175   3              {
 176   4                P3 = 0xEF;
 177   4                if(P3 != 0xEF)
 178   4                {
C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 4   

 179   5                  row = 4;
 180   5                  check_column();
 181   5                }
 182   4                else
 183   4                {
 184   5                  success = 0;
 185   5                }
 186   4              }
 187   3            }
 188   2          }
 189   1        if(success == 1 && prev_success == 0)
 190   1        {
 191   2          s_count++;
 192   2          LCD_CmdWrite(0x80);     // Cursor to First line First Position
 193   2          msg[0] = keys[row-1][column-1]; 
 194   2          send_char(msg[0]); 
 195   2          //msg[0] =  ((row+column)%3 + 48);
 196   2          //send_bit( (row+column)%3 );
 197   2          data_char = msg[0];
 198   2          count_str[3] = (char) ((s_count)%10 + 48);
 199   2          count_str[2] = (char) ((s_count/10)%10 + 48);
 200   2          count_str[1] = (char) ((s_count/100)%10 + 48);
 201   2          count_str[0] = '_'; 
 202   2          LCD_StringWrite(msg,1);
 203   2          LCD_StringWrite(count_str,4); 
 204   2        }
 205   1      //  rc[1] = (char) (column + 48);
 206   1      //  rc[0] = (char) (row + 48);  
 207   1        
 208   1        
 209   1        prev_success = success;
 210   1      } 
 211          
 212          void check_column()
 213          {
 214   1          //column = 0;
 215   1          P3 = 0xF7;
 216   1          if(P3 != 0xF7)
 217   1          {
 218   2            column = 1;
 219   2          }
 220   1          else
 221   1          {
 222   2            P3 = 0xFB;
 223   2            if(P3 != 0xFB)
 224   2            {
 225   3              column = 2;
 226   3            }
 227   2            else
 228   2            {
 229   3              P3 = 0xFD;
 230   3              if(P3 != 0xFD)
 231   3              {
 232   4                column = 3;
 233   4              }
 234   3              else
 235   3              {
 236   4                P3 = 0xFE;
 237   4                if(P3 != 0xFE)
 238   4                {
 239   5                  column = 4;
 240   5                }
C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 5   

 241   4              }
 242   3            }
 243   2          }
 244   1        }
 245          
 246            void keys_init(void)
 247            {
 248   1          keys[0][0] = '1';
 249   1          keys[0][1] = '2';
 250   1          keys[0][2] = '3';
 251   1          keys[0][3] = 'A';
 252   1          
 253   1          keys[1][0] = '4';
 254   1          keys[1][1] = '5';
 255   1          keys[1][2] = '6';
 256   1          keys[1][3] = 'B';
 257   1          
 258   1          keys[2][0] = '7';
 259   1          keys[2][1] = '8';
 260   1          keys[2][2] = '9';
 261   1          keys[2][3] = 'C';
 262   1          
 263   1          keys[3][0] = '*';
 264   1          keys[3][1] = '0';
 265   1          keys[3][2] = '#';
 266   1          keys[3][3] = 'D';
 267   1        }
 268            
 269            void send_char( char a )
 270            {
 271   1          int a_int = (int) a;
 272   1          int i;
 273   1          for(i=1;i<9;i++)
 274   1          {
 275   2            a_bits[i] = a_int%2;
 276   2            a_int = a_int/2;
 277   2          }
 278   1          
 279   1          Data_Out = 0;
 280   1          
 281   1          TMOD = 0x01;
 282   1          TH0 = 0xFF;
 283   1          TL0 = 0x06;
 284   1          TR0 =1;
 285   1          while(TF0 == 0);
 286   1          TF0 = 0;
 287   1          Data_Out = 1;
 288   1          TMOD = 0x01;
 289   1          TH0 = 0xFF;
 290   1          TL0 = 0x06;//F830 FF06
 291   1          TR0 =1;
 292   1          while(TF0 == 0);
 293   1          TF0 = 0;
 294   1          
 295   1          for(i=1;i<10;i++)
 296   1          {
 297   2            send_bit(a_bits[i]);
 298   2          }
 299   1        }
 300            void Timer_Init(int b)
 301            {
 302   1          TMOD = 0x01;
C51 COMPILER V9.56.0.0   INTERFACING                                                       03/06/2017 21:56:57 PAGE 6   

 303   1          if(b==1)
 304   1          {
 305   2            TH0 = 0xFE;
 306   2            TL0 = 0x0C;
 307   2          }
 308   1          else if(b==2)
 309   1          {
 310   2            TH0 = 0xF8;
 311   2            TL0 = 0x30;
 312   2          }
 313   1          else
 314   1          {
 315   2            TH0 = 0xFC;
 316   2            TL0 = 0x18;
 317   2          }
 318   1          TR0 = 1;
 319   1        }
 320            void send_bit( int b )
 321            {
 322   1          Data_Out = 0;
 323   1          Timer_Init(b);
 324   1          while(TF0 == 0);
 325   1          TF0 = 0;
 326   1          //invert here;
 327   1          Data_Out = 1;
 328   1          Timer_Init(b);
 329   1          while(TF0 == 0);
 330   1          TF0 = 0;
 331   1          TR0 = 0;
 332   1          //invert again
 333   1        }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    740    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     52       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
